import time

from enum import Enum
from constants import usable_notes

# note setup :: note/octave = (servo0, sol1, sol2, sol3, sol4, sol5, servo6, servo7)
# solenoids are SOL_OPEN/SOL_CLOSED, servos are SERVO_CLOSED, SERVO_HALF, SERVO_OPEN
class Notes(Enum):
	# pins
	SERVO_0 = 36
	SOL_1 = 3
	SOL_2 = 5
	SOL_3 = 7
	SOL_4 = 11
	SOL_5 = 13
	SERVO_6 = 38
	SERVO_7 = 40

	# servos
	# ! need to find which value corresponds to fully open/half/closed
	SERVO_CLOSED = 0
	SERVO_HALF = 1
	SERVO_OPEN = 2	

	# solenoid
	SOL_OPEN = False
	SOL_CLOSED = True

	# notes to physical positions
	PHYS_NOTE_DICT = {#			0			1			2			3			4			5			6				7
		usable_notes[0]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_CLOSED, SERVO_CLOSED),
		usable_notes[1]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_CLOSED, SERVO_HALF),
		usable_notes[2]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_CLOSED, SERVO_OPEN),
		usable_notes[3]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_HALF, SERVO_OPEN),
		usable_notes[4]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_OPEN, SERVO_OPEN),
		usable_notes[5]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SERVO_CLOSED, SERVO_CLOSED),
		usable_notes[6]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SERVO_CLOSED, SERVO_OPEN),
		usable_notes[7]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[8]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SERVO_HALF, SERVO_OPEN),
		usable_notes[9]:(SERVO_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[10]:(SERVO_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[11]:(SERVO_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[12]:(SERVO_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[13]:(SERVO_OPEN, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[14]:(SERVO_OPEN, SOL_OPEN, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[15]:(SERVO_OPEN, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_CLOSED, SERVO_CLOSED),
		usable_notes[16]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SERVO_OPEN, SERVO_OPEN),
		usable_notes[17]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SERVO_CLOSED, SERVO_OPEN),
		usable_notes[18]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SERVO_OPEN, SERVO_OPEN),
		usable_notes[19]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[20]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[21]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_OPEN, SERVO_OPEN, SERVO_OPEN),
		usable_notes[22]:(SERVO_HALF, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SERVO_CLOSED, SERVO_OPEN),
		usable_notes[23]:(SERVO_HALF, SOL_OPEN, SOL_OPEN, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SERVO_OPEN, SERVO_OPEN),
		usable_notes[24]:(SERVO_HALF, SOL_CLOSED, SOL_OPEN, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SERVO_OPEN, SERVO_OPEN),
		usable_notes[25]:(SERVO_HALF, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SERVO_OPEN, SERVO_CLOSED),
		usable_notes[26]:(SERVO_HALF, SOL_CLOSED, SOL_OPEN, SOL_CLOSED, SOL_CLOSED, SOL_OPEN, SERVO_CLOSED, SERVO_OPEN),
	}

	@staticmethod
	def playNote(note, length):
		timer = time.time()
		while time.time() - timer <= length:
			# send GPIO signal corresponding to note for that length of time
			continue

